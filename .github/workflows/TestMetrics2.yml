name: Testing Monthly issue metrics
on:
  workflow_dispatch:
  schedule:
    - cron: '* * * * 1-5'

permissions:
  issues: write
  pull-requests: read

jobs:
  build:
    name: issue metrics
    runs-on: ubuntu-latest
    steps:
    - name: Setting the Repo
      uses: actions/github-script@v6
      with:
          script: |
            // - github: A pre-authenticated octokit/rest.js client
            const { owner, repo } = context.repo;
    - name: Get dates for last month
      shell: bash
      run: |
        # Calculate the first day of the previous month
        first_day=$(date -d "last month" +%Y-%m-01)

        # Calculate the last day of the previous month
        last_day=$(date -d "$first_day +1 month -1 day" +%Y-%m-%d)

        #Set an environment variable with the date range
        echo "$first_day..$last_day"
        echo "last_month=$first_day..$last_day" >> "$GITHUB_ENV"

    - name: Run issue-metrics tool for issues opened in this month
      id: issue-metrics1
      uses: github/issue-metrics@v3
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        LABELS_TO_MEASURE: 'Status: Open,Status:Accepted,Status:Pending'
        SEARCH_QUERY: 'repo:RamyaBill/AutomateGitRepo is:issue created:2023-01-01..2023-12-31'
           
    - name: Print output of open issues from the metrics tool 
      run: echo "${{ steps.issue-metrics1.outputs.metrics }}"
        


    - name: Run issue-metrics tool for issues closed in May 2023, may have been open in this month or earlier
      id: issue-metrics2
      uses: github/issue-metrics@v3
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SEARCH_QUERY: 'repo:RamyaBill/AutomateGitRepo is:issue closed:2023-01-01..2024-04-20'
        
    - name: Print output of closed issues from the metrics tool
      run: echo "${{ steps.issue-metrics2.outputs.metrics }}"





    - name: Read issue_metrics.md
      id: read_issue_metrics
      run: |
        content=$(< ./issue_metrics.md)
        echo "::set-output name=metrics::${content}"

    - name: Split content into smaller chunks
      id: split_content
      run: |
          chunk_size=500  # Adjust chunk size as needed
          content="${{ steps.read_issue_metrics.outputs.metrics }}"
          while [ ${#content} -gt 0 ]; do
            chunk="${content:0:$chunk_size}"
            content="${content:$chunk_size}"
            echo "::set-output name=chunk::$chunk"
          done

    - name: Send to Microsoft Teams
      if: ${{ steps.read_issue_metrics.outputs.metrics != '' }}
      run: |
          while IFS= read -r chunk; do
            curl -X POST -H 'Content-Type: application/json' -d '{"text": "'"$chunk"'"}' ${{ secrets.TEAMS_INCOMING_WEBHOOK_URL }}
          done < <(echo "${{ steps.split_content.outputs.chunk }}")

      
