name: Select the top voted enhancement request

on:
  schedule:
    - cron: "* * * * 1-5"

jobs:
  voting-labeler-test:
    runs-on: ubuntu-latest
    permissions:
      issues: write
    steps:
      - name: Check for most voted enhancement
        id: vote-issues
        uses: actions/github-script@v6
        with:
          script: |
            // - github: A pre-authenticated octokit/rest.js client
            const { owner, repo } = context.repo;
            const openLabel = "Status: Open";
            const votingLabel = "Status: Voting";

            // Query all GH issues for Voting 
            const issuesResponse = await github.rest.issues.listForRepo({
              owner,
              repo,
              labels: votingLabel,
              state: 'open',
              direction: 'desc',
            });
            
            //issuesResponse has all the issues labeled with Voting.
            if (issuesResponse.data.length === 0) {
              core.info('No issues labelled with Voting found to process. Exiting.');
              return;
            }
            //filter issues with atleast one vote. Change it later to >1
            issuesResponse.data = issuesResponse.data.filter((i) => i.reactions['+1'] > 1)
            
            if (issuesResponse.data.length === 0) {
              core.info('Current issues in the Voting stage do not have enough votes to qualify for selection. Exiting');
              return;
            }

            issuesResponse.data.sort.reactions-+1;
            
            mostVotes = 0;
            oldestIssue = 0;
            oldestDate = new Date(null).getTime();
            for (const issue of issuesResponse.data) {
              core.info(`Processing issue #${issue.number}`);
              core.info(`Number of +1 reactions ${issue.reactions['+1']}`);
              core.info(`Issue was created ${issue.created_at}`);
              issueVotes = issue.reactions['+1'];
              issueDate = new Date(issue.created_at).getTime();
              
              if (oldestDate == 0) {
                  oldestDate = new Date(issue.created_at).getTime();
                  oldestIssue = issue;
                  mostVotes = issueVotes;
                }

              if ((issueVotes >=  mostVotes) && (issueDate < oldestDate)) { 
                mostVotes = issueVotes;
                oldestIssue = issue;
                }
            }
            core.info(`Highest votes is  ${mostVotes}`);
            core.info(`Final issue selected for enhancement is #${oldestIssue.number} created on ${oldestIssue.created_at}`);
            const message = `Greetings, 
              This enhancement request has been selected in the community Voting and will be escalated to our Product Management Team.`;
            await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: oldestIssue.number,
                  body: message,
                });
                
            return oldestIssue.number;
            
      - uses: neonidian/teams-notify-build-status@v3
        if: ${{ steps.vote-issues.outputs.result}}   
        with:
           webhookUrl: ${{ secrets.TEAMS_INCOMING_WEBHOOK_URL }}   # Secret name is "TEAMS_INCOMING_WEBHOOK_URL"
           message: The  Github issue number ${{ steps.vote-issues.outputs.result }} has been selected for voting and thus requires to be escalated. 
